//===----------------------------------------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef LIBCPP_TEST_BITSET_TEST_CASES_H
#define LIBCPP_TEST_BITSET_TEST_CASES_H

#include <cuda/std/bitset>

#include "test_macros.h"
#include "template_cost_testing.h" // for base cases of REPEAT_*

template<typename T>
class span_stub {
public:
    template<cuda::std::size_t Size>
    __host__ __device__
    span_stub(T (&arr)[Size]) : _ptr(arr), _len(Size) {}

    __host__ __device__
    cuda::std::size_t size() const {
        return _len;
    }

    __host__ __device__
    const T & operator[](cuda::std::size_t idx) const {
        return _ptr[idx];
    }

private:
    T * _ptr;
    cuda::std::size_t _len;
};

template <int N>
__host__ __device__
TEST_CONSTEXPR_CXX23 span_stub<const char *> get_test_cases();

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<0>() {
    static const char * cases[] = {
        "",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<1>() {
    static const char * cases[] = {
        "0",
        "1",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<2>() {
    static const char * cases[] = {
        "00",
        "01",
        "10",
        "11",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<31>() {
    static const char * cases[] = {
        "0000000000000000000000000000000",
        "0000000000000000000000000000001",
        "1000000000000000000000000000000",
        "1000000000000000000000000000001",
        "1000000000000000000001000000001",
        "0000000000000000111111111111111",
        "1000000000000000111111111111111",
        "1111111111111111000000000000000",
        "1111111111111111000000000000001",
        "1010101010101010101010101010101",
        "0101010101010101010101010101010",
        "1111111111111111111111111111111",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<32>() {
    static const char * cases[] = {
        "00000000000000000000000000000000",
        "00000000000000000000000000000001",
        "10000000000000000000000000000000",
        "10000000000000000000000000000001",
        "10000000000000000000111000000001",
        "00000000000000001111111111111111",
        "10000000000000001111111111111111",
        "11111111111111110000000000000000",
        "11111111111111110000000000000001",
        "10101010101010101010101010101010",
        "01010101010101010101010101010101",
        "11111111111111111111111111111111",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<33>() {
    static const char * cases[] = {
        "000000000000000000000000000000000",
        "000000000000000000000000000000001",
        "100000000000000000000000000000000",
        "100000000000000000000000000000001",
        "100000000000000000001110000000001",
        "000000000000000011111111111111111",
        "100000000000000011111111111111111",
        "111111111111111100000000000000000",
        "111111111111111100000000000000001",
        "101010101010101010101010101010101",
        "010101010101010101010101010101010",
        "111111111111111111111111111111111",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<63>() {
    static const char * cases[] = {
        "000000000000000000000000000000000000000000000000000000000000000",
        "000000000000000000000000000000000000000000000000000000000000001",
        "100000000000000000000000000000000000000000000000000000000000000",
        "100000000000000000000000000000000000000000000000000000000000001",
        "100000000000000000000000001111100000000000000000000000000000001",
        "000000000000000000000000000000001111111111111111111111111111111",
        "100000000000000000000000000000001111111111111111111111111111111",
        "111111111111111111111111111111110000000000000000000000000000000",
        "111111111111111111111111111111110000000000000000000000000000001",
        "101010101010101010101010101010101010101010101010101010101010101",
        "010101010101010101010101010101010101010101010101010101010101010",
        "111111111111111111111111111111111111111111111111111111111111111",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<64>() {
    static const char * cases[] = {
        "0000000000000000000000000000000000000000000000000000000000000000",
        "0000000000000000000000000000000000000000000000000000000000000001",
        "1000000000000000000000000000000000000000000000000000000000000000",
        "1000000000000000000000000000000000000000000000000000000000000001",
        "1000000000000000000000000011111000000000000000000000000000000001",
        "0000000000000000000000000000000011111111111111111111111111111111",
        "1000000000000000000000000000000011111111111111111111111111111111",
        "1111111111111111111111111111111100000000000000000000000000000000",
        "1111111111111111111111111111111100000000000000000000000000000001",
        "1010101010101010101010101010101010101010101010101010101010101010",
        "0101010101010101010101010101010101010101010101010101010101010101",
        "1111111111111111111111111111111111111111111111111111111111111111",
    };
    return cases;
}

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<65>() {
    static const char * cases[] = {
        "00000000000000000000000000000000000000000000000000000000000000000",
        "00000000000000000000000000000000000000000000000000000000000000001",
        "10000000000000000000000000000000000000000000000000000000000000000",
        "10000000000000000000000000000000000000000000000000000000000000001",
        "10000000000000000000000000011111000000000000000000000000000000001",
        "00000000000000000000000000000000011111111111111111111111111111111",
        "10000000000000000000000000000000011111111111111111111111111111111",
        "11111111111111111111111111111111000000000000000000000000000000000",
        "11111111111111111111111111111111000000000000000000000000000000001",
        "10101010101010101010101010101010101010101010101010101010101010101",
        "01010101010101010101010101010101010101010101010101010101010101010",
        "11111111111111111111111111111111111111111111111111111111111111111",
    };
    return cases;
}

#define BITSET_ZERO() "0"
#define BITSET_ONE() "1"
#define BITSET_ONEZERO() "10"
#define BITSET_ZEROONE() "10"

#define REPEAT_8(DO_IT) \
    DO_IT() DO_IT() DO_IT() DO_IT() DO_IT() \
    DO_IT() DO_IT() DO_IT()
#define REPEAT_9(DO_IT) \
    REPEAT_8(DO_IT) DO_IT()
#define REPEAT_90(DO_IT) \
    REPEAT_10(DO_IT) REPEAT_10(DO_IT) REPEAT_10(DO_IT) REPEAT_10(DO_IT) REPEAT_10(DO_IT) \
    REPEAT_10(DO_IT) REPEAT_10(DO_IT) REPEAT_10(DO_IT) REPEAT_10(DO_IT)
#define REPEAT_99(DO_IT) \
    REPEAT_90(DO_IT) REPEAT_9(DO_IT)
#define REPEAT_400(DO_IT) \
    REPEAT_100(DO_IT) REPEAT_100(DO_IT) REPEAT_100(DO_IT) REPEAT_100(DO_IT)
#define REPEAT_499(DO_IT) \
    REPEAT_400(DO_IT) REPEAT_99(DO_IT)
#define REPEAT_900(DO_IT) \
    REPEAT_500(DO_IT) REPEAT_400(DO_IT)
#define REPEAT_998(DO_IT) \
    REPEAT_900(DO_IT) REPEAT_90(DO_IT) REPEAT_8(DO_IT)
#define REPEAT_999(DO_IT) \
    REPEAT_900(DO_IT) REPEAT_99(DO_IT)

template <>
__host__ __device__
TEST_CONSTEXPR_CXX23 inline span_stub<const char *> get_test_cases<1000>() {
    static const char * cases[] = {
        REPEAT_1000(BITSET_ZERO),
        REPEAT_999(BITSET_ZERO) BITSET_ONE(),
        BITSET_ONE() REPEAT_999(BITSET_ZERO),
        BITSET_ONE() REPEAT_998(BITSET_ZERO) BITSET_ONE(),
        BITSET_ONE() REPEAT_400(BITSET_ZERO) REPEAT_99(BITSET_ONE) REPEAT_499(BITSET_ZERO) BITSET_ONE(),
        REPEAT_500(BITSET_ZERO) REPEAT_500(BITSET_ONE),
        BITSET_ONE() REPEAT_499(BITSET_ZERO) REPEAT_500(BITSET_ONE),
        REPEAT_500(BITSET_ONE) REPEAT_500(BITSET_ZERO),
        REPEAT_500(BITSET_ONE) REPEAT_499(BITSET_ZERO) BITSET_ONE(),
        REPEAT_500(BITSET_ONEZERO),
        REPEAT_500(BITSET_ZEROONE),
        REPEAT_1000(BITSET_ONE),
    };
    return cases;
}

#endif // !LIBCPP_TEST_BITSET_TEST_CASES_H
